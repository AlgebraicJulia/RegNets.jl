var documenterSearchIndex = {"docs":
[{"location":"api/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"api/","page":"Library Reference","title":"Library Reference","text":"Modules = [RegNets]","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"EditURL = \"https://github.com/AlgebraicJulia/RegNets.jl/blob/main/docs/literate/ASKEMRegNets.jl\"","category":"page"},{"location":"generated/ASKEMRegNets/#Building-Regulatory-Networks","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"Here we will build a modeling framework for regulatory networks with Lotka-Volterra semantics using Catlab.jl","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"using RegNets, RegNets.ASKEMRegNets\nusing Catlab\nusing JSON, HTTP, OrdinaryDiffEq, Plots","category":"page"},{"location":"generated/ASKEMRegNets/#Define-the-schema","page":"Building Regulatory Networks","title":"Define the schema","text":"","category":"section"},{"location":"generated/ASKEMRegNets/#Graph-Schema","page":"Building Regulatory Networks","title":"Graph Schema","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"Catlab provides a basic Graph schema out of the box","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"@present SchGraph(FreeSchema) begin\n  V::Ob\n  E::Ob\n  src::Hom(E,V)\n  tgt::Hom(E,V)\nend","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"to_graphviz(SchGraph, edge_attrs=Dict(:len=>\"1.5\"))","category":"page"},{"location":"generated/ASKEMRegNets/#Basic-Signed-Graph-Schema","page":"Building Regulatory Networks","title":"Basic Signed Graph Schema","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"The basic structure of a regulatory network can be represented by a signed graph. We simply want to add signs to each edge","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"@present SchSignedGraph <: SchGraph begin\n  Sign::AttrType\n  sign::Attr(E,Sign)\nend","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"to_graphviz(SchSignedGraph, edge_attrs=Dict(:len=>\"1.5\"))","category":"page"},{"location":"generated/ASKEMRegNets/#Basic-Signed-Graph-Schema-with-Rates","page":"Building Regulatory Networks","title":"Basic Signed Graph Schema with Rates","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"We also may want to keep track of rates of these interactions as well. Implicit rates on each vertice as well as rates on each edge.","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"@present SchRateSignedGraph <: SchSignedGraph begin\n  A::AttrType\n  vrate::Attr(V,A)\n  erate::Attr(E,A)\nend","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"to_graphviz(SchRateSignedGraph, edge_attrs=Dict(:len=>\"1.5\"))","category":"page"},{"location":"generated/ASKEMRegNets/#ASKEM-RegNet-Schema","page":"Building Regulatory Networks","title":"ASKEM RegNet Schema","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"For our regulatory network models in ASKEM we also want to have labels on our edges and vertices as well as capture the initial concentrations along with this. We can easily extend our schema with these added attributes:","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"@present SchASKEMRegNet <: SchRateSignedGraph begin\n C::AttrType\n Name::AttrType\n initial::Attr(V,C)\n vname::Attr(V,Name)\n ename::Attr(E,Name)\nend","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"to_graphviz(SchASKEMRegNet, edge_attrs=Dict(:len=>\"1.5\"))","category":"page"},{"location":"generated/ASKEMRegNets/#Load-the-model","page":"Building Regulatory Networks","title":"Load the model","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"ASKEM's model representation repository defines a common structure for us to share models, we can use a simple JSON parser to load that into our new schema.","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"function parse_askem_model(input::AbstractDict)\n  regnet = ASKEMRegNet()\n  param_vals = Dict(p[\"id\"]=>p[\"value\"] for p in input[\"model\"][\"parameters\"])\n  resolve_val(x) = typeof(x) == String ? param_vals[x] : x\n\n  vertice_idxs = Dict(vertice[\"id\"]=> add_part!(regnet, :V;\n    vname=Symbol(vertice[\"id\"]),\n    vrate = 0\n    if haskey(vertice, \"rate_constant\")\n      vrate = (vertice[\"sign\"] ? 1 : -1) * resolve_val(vertice[\"rate_constant\"])\n    end\n    initial=haskey(vertice, \"initial\") ? resolve_val(vertice[\"initial\"]) : 0\n  ) for vertice in input[\"model\"][\"vertices\"])\n\n  for edge in input[\"model\"][\"edges\"]\n    rate = 0\n    if haskey(edge, \"properties\") && haskey(edge[\"properties\"], \"rate_constant\")\n      rate = resolve_val(edge[\"properties\"][\"rate_constant\"])\n      rate >= 0 || error(\"Edge rates must be strictly positive\")\n    end\n    add_part!(regnet, :E; src=vertice_idxs[edge[\"source\"]],\n                          tgt=vertice_idxs[edge[\"target\"]],\n                          sign=edge[\"sign\"],\n                          ename=Symbol(edge[\"id\"]),\n                          erate=rate)\n  end\n\n  regnet\nend","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"lotka_volterra = HTTP.get(\n  \"https://raw.githubusercontent.com/DARPA-ASKEM/Model-Representations/main/regnet/examples/lotka_volterra.json\"\n).body |> String |> parse_askem_model","category":"page"},{"location":"generated/ASKEMRegNets/#Visualize-the-model","page":"Building Regulatory Networks","title":"Visualize the model","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"Catlab provides methods which can be overloaded with our new type to get modeling framework specific visualizations.","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"function Catlab.Graphics.to_graphviz_property_graph(sg::AbstractSignedGraph; kw...)\n  get_attr_str(attr, i) = String(has_subpart(sg, attr) ? subpart(sg, i, attr) : Symbol(i))\n  # make a new property graph\n  pg = PropertyGraph{Any}(;kw...)\n  # add vertices with labels for the visualization\n  map(parts(sg, :V)) do v\n    add_vertex!(pg, label=get_attr_str(:vname, v))\n  end\n  # add edges with labels and change the arrowhead\n  # based on the sign of the edge for the visualization\n  map(parts(sg, :E)) do e\n    add_edge!(pg,\n      sg[e, :src],\n      sg[e, :tgt],\n      label=get_attr_str(:ename, e),\n      arrowhead=(sg[e,:sign] ? \"normal\" : \"tee\")\n    )\n  end\n  pg\nend","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"Then we can simply call to_graphviz and see our model:","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"to_graphviz(lotka_volterra)","category":"page"},{"location":"generated/ASKEMRegNets/#Simulate-the-model","page":"Building Regulatory Networks","title":"Simulate the model","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"Next we want to have a method for calculating the dynamics from the model.","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"We can simply encode the Lotka-Volterra dynamics as a vectorfield function:","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"function vectorfield(sg::AbstractSignedGraph)\n  (u, p, t) -> [\n    p[:vrate][i]*u[i] + sum(\n        (sg[e,:sign] ? 1 : -1)*p[:erate][e]*u[i]u[sg[e, :src]]\n      for e in incident(sg, i, :tgt); init=0.0)\n    for i in 1:nv(sg)\n  ]\nend","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"And we can use that to pass into an ODEProblem using DifferentialEquations.jl","category":"page"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"ODEProblem(\n  vectorfield(lotka_volterra), # generate the vectorfield\n  lotka_volterra[:initial],    # get the initial concentrations\n  (0.0, 100.0),                # set the time period\n  lotka_volterra,              # pass in model which contains the rate parameters\n  alg=Tsit5()\n) |> solve |> plot","category":"page"},{"location":"generated/ASKEMRegNets/#Autogenerated-JSON-Serialization","page":"Building Regulatory Networks","title":"Autogenerated JSON Serialization","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"Catlab provides automatic serialization to JSON with these types both the models that fit within a given schema as well as the schema itself.","category":"page"},{"location":"generated/ASKEMRegNets/#Serialize-the-model","page":"Building Regulatory Networks","title":"Serialize the model","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"JSON.print(generate_json_acset(lotka_volterra), 2)","category":"page"},{"location":"generated/ASKEMRegNets/#Serialize-the-ACSet-schema","page":"Building Regulatory Networks","title":"Serialize the ACSet schema","text":"","category":"section"},{"location":"generated/ASKEMRegNets/","page":"Building Regulatory Networks","title":"Building Regulatory Networks","text":"JSON.print(generate_json_acset_schema(SchASKEMRegNet), 2)","category":"page"},{"location":"#RegNets.jl","page":"RegNets.jl","title":"RegNets.jl","text":"","category":"section"},{"location":"","page":"RegNets.jl","title":"RegNets.jl","text":"CurrentModule = RegNets","category":"page"},{"location":"","page":"RegNets.jl","title":"RegNets.jl","text":"RegNets.jl is a Julia library for building Regulatory Networks compositionally.","category":"page"}]
}
